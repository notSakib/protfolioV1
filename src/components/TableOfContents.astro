---
import type { MarkdownHeading } from "astro";
type Props = {
  headings: MarkdownHeading[];
};
type HeadingWithSubheadings = MarkdownHeading & {
  subheadings: MarkdownHeading[];
};
const { headings } = Astro.props;
const grouppedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }
  return array;
}, [] as HeadingWithSubheadings[]);
---

<nav id="table-of-contents" aria-label="Table Of Contents">
  <div class="mb-4 font-semibold uppercase">Table of content</div>
  <div>
    {
      grouppedHeadings.map((h) => (
        <div class="mb-4 leading-tight">
          <a href={`#${h.slug}`}>{h.text}</a>
          {h.subheadings.length > 0 && (
            <div class="ml-3 mt-3 leading-tight">
              {h.subheadings.map((sub) => (
                <div>
                  <a href={`#${sub.slug}`}>{sub.text}</a>
                </div>
              ))}
            </div>
          )}
        </div>
      ))
    }
  </div>
</nav>

<script is:inline>
  // This script tag is useful only if you want to display the TOC alongside the blog post...
  // ... and highlight the section that the user is currently reading through.
  // Feel free to remove this tag if you don't need this type of functionality.

  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        const headingFragment = `#${entry.target.id}`;
        const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

        if (entry.isIntersecting) {
          const previouslyActivatedItem =
            document.querySelector(".active-toc-item");

          previouslyActivatedItem?.classList.remove("active-toc-item");
          tocItem.classList.add("active-toc-item");
        } else {
          const isAnyOtherEntryIntersecting = entries.some(
            (e) => e.target.id !== entry.target.id && e.isIntersecting
          );

          if (isAnyOtherEntryIntersecting) {
            tocItem.classList.remove("active-toc-item");
          }
        }
      }
    },
    { root: null, rootMargin: "0px", threshold: [1] }
  );

  const sectionHeadings = document.querySelectorAll(
    "article > h2, article > h3"
  );

  for (const heading of sectionHeadings) {
    observer.observe(heading);
  }
</script>

<style lang="less" is:global>
  #table-of-contents {
    @apply h-max min-w-60;
    position: sticky;
    top: 40px;
    font-size: 16px;
    a {
      line-height: 1.2;
    }
  }
  .active-toc-item {
    color: #0047ff;
  }
</style>
